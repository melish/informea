<?php
/**
 * @file
 * Code for the informea feature.
 */

include_once 'informea.features.inc';

define('INFORMEA_VOC_INFORMEA', 'thesaurus_informea');
define('INFORMEA_VOC_GEG', 'thesaurus_geg');
define('INFORMEA_VOC_IEG', 'thesaurus_ieg');
define('INFORMEA_VOC_GEMET', 'thesaurus_gemet');

define('ROLE_MEA', 'MEA');
define('ROLE_ADMINISTRATOR', 'administrator');

define('DATA_SOURCE_ECOLEX', 2767);
define('DATA_SOURCE_FAOLEX', 3689);
define('DATA_SOURCE_INFORMEA', 815);

/**
 * Implements hook_form_alter().
 */
function informea_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'the_content') {
    $form['field_treaty_target_id'] = array(
      '#type' => 'entityreference',
      '#default_value'=>[],
      '#era_entity_type' => 'node',
      '#era_bundles' => array('treaty'),
      '#era_cardinality' => 3,
      '#era_query_settings' => array(
        'limit' => 15,
      ),
    );
  };
}

/**
 * Implements hook_schema_alter()
 */
function informea_schema_alter(&$schema) {
  $table = 'field_data_title_field';
  $column = 'title_field_value';

  $new_spec = array(
    'type' => 'varchar', 'length' => 2048, 'not null' => TRUE, 'default' => '',
  );
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'field_revision_title_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }

  $table = 'node';
  $column = 'title';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'node_revision';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
}

/**
 * Implements hook_block_info().
 */
function informea_block_info() {
  return array(
    'informea_front_page_slider' => array(
      'info' => t('Front page slider'),
      'cache' => DRUPAL_NO_CACHE,
      'weight' => 10,
      'status' => 1,
      'region' => 'front_page_hero',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
    ),
    'informea_share' => array(
      'info' => t('Informea Share'),
      'cache' => DRUPAL_NO_CACHE,
      'weight' => 10,
      'status' => 1,
      'visibility' => BLOCK_VISIBILITY_LISTED,
    ),
    'informea_subscribe_updates' => array(
      'info' => t('Informea updates'),
      'cache' => DRUPAL_NO_CACHE,
      'weight' => 10,
      'status' => 1,
      'visibility' => BLOCK_VISIBILITY_LISTED,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function informea_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'informea_front_page_slider':
      $block['content'] = informea_theme_slider();
      break;

    case 'informea_share':
      global $language;
      $content = '';
      $node = menu_get_object();
      if (!empty($node->nid)) {
        $url = url('/node/' . $node->nid, array('absolute' => TRUE));
        $title = field_get_items('node', $node, 'title_field');
        $title = current($title)['value'];
        $site_name = variable_get('site_name', '');
        // Construct the tweet.
        $twitter_text = $title . ' | ' . $site_name;
        $tweet_url = url('https://twitter.com/intent/tweet', array(
          'query' => array(
            'original_referer' => $url,
            'text' => $twitter_text,
//            'url' => shorten_url($url),
            'url' => $url,
          ),
        ));
        $vars = array(
          'url' => $url,
          'tweet_url' => $tweet_url,
          'node' => $node,
          'language' => $language,
        );
        $content = theme('informea_share_widget', $vars);
      }
      $block['content'] = $content;
      break;

    case 'informea_subscribe_updates':
      $block['content'] = drupal_get_form('informea_subscribe_updates_form');
      break;
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function informea_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'informea_front_page_slider':
      $form['informea_max_slides_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum number of slides'),
        '#size' => 60,
        '#description' => t('This will limit the maximum number of slides.'),
        '#default_value' => variable_get('informea_max_slides_count', 7),
        '#element_validate' => array('element_validate_integer_positive')
      );

      break;
  }

  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function informea_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'informea_front_page_slider':
      variable_set('informea_max_slides_count', $edit['informea_max_slides_count']);

      break;
  }
}

function informea_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['ajax'] = array(
    'custom settings' => TRUE,
    'label' => t('AJAX')
  );
}


function informea_preprocess_node(&$vars) {
  if ($vars['view_mode'] == 'ajax') {
    $vars['theme_hook_suggestions'][] = 'node__ajax';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['node']->type . '__ajax';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['node']->nid . '__ajax';
  }
}

function informea_cronapi($op, $job = NULL) {
  return array(
    'informea_remove_duplicate_news' => array(
      'description' => 'Check and remove duplicate news by title',
      'rule' => '0 8 * * *', // Every day at 08:00 AM
    )
  );
}


/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function informea_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    $settings['allowedContent'] = TRUE;
  }
}

/**
 * Defines menu items and page callbacks.
 *
 * @return
 *   An associative array of properties for each path.
 */
function informea_menu() {
  $items['ajax/modal/node/%node'] = array(
    'page callback'     => 'informea_ajax_node_modal',
    'page arguments'    => array(3),
    'type'              => MENU_CALLBACK,
    'access arguments'  => array('access content'),
  );
  $items['pdfjs'] = array(
    'page callback'     => 'informea_pdfjs_view',
    'page arguments'    => array(1),
    'type'              => MENU_CALLBACK,
    'access arguments'  => array('access content'),
  );
  $items['admin/config/services/analytics/google-analytics'] = array(
    'title' => 'Configure Google Analytics',
    'description' => 'Configure the keys for Google Analytics tracking',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('informea_analytics_form'),
    'file' => 'informea.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK
  );
  $items['informea/autocomplete/single/field_treaty/node/%'] = array(
    'title' => 'Entity Reference Autocomplete',
    'page callback' => 'informea_entityreference_autocomplete_field_treaty_callback',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => 'entityreference_autocomplete_access_callback',
    'access arguments' => array(2, 3, 4, 5),
    'file' => 'informea.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['informea/autocomplete/single/field_meeting/node/%'] = array(
    'title' => 'Entity Reference Autocomplete',
    'page callback' => 'informea_entityreference_autocomplete_field_meeting_callback',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => 'entityreference_autocomplete_access_callback',
    'access arguments' => array(2, 3, 4, 5),
    'file' => 'informea.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function informea_feeds_presave(FeedsSource $source, $entity, $item) {
  if (!empty($source->feed_nid)) {
    $w = entity_metadata_wrapper('node', $source->feed_nid);
    $image = $w->field_image->value();
    $entity->field_image[LANGUAGE_NONE][0] = $image;

    // treaties
    $treaties = $w->field_treaty->value();
    if (!empty($treaties)) {
      $nids = array();
      foreach($treaties as $ob) {
        $nids[] = array('target_id' => $ob->nid);
      }
      $entity->field_treaty[LANGUAGE_NONE] = $nids;
    }

    // topics
    $topics = $w->field_mea_topic->value();
    if (!empty($topics)) {
      $nids = array();
      foreach($topics as $ob) {
        $nids[] = array('tid' => $ob->tid);
      }
      $entity->field_mea_topic[LANGUAGE_NONE] = $nids;
    }
  }

}


function informea_ajax_node_modal($node) {
  $arr = node_view($node, 'ajax');
  $html = drupal_render($arr);
  print <<<EOT
<div class="modal-header">
  <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
  <h4 class="modal-title" id="modal-decision-label">{$node->title}</h4>
</div><!-- .modal-header -->
<div class="modal-body">$html</div><!-- .modal-body -->
<div class="modal-footer">
  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
</div><!-- .modal-footer -->
EOT;
  drupal_exit();
}


/**
 * Implements hook_date_formats().
 */
function informea_date_formats() {
  variable_set('date_format_short', 'j M Y');
  variable_set('date_format_medium', 'd M Y - H:i');
  variable_set('date_format_long', 'D, d F Y - H:i');
  return array(
    array(
      'type' => 'short',
      'format' => 'j M Y',
      'locales' => array(),
    ),
    array(
      'type' => 'medium',
      'format' => 'd M Y - H:i',
      'locales' => array(),
    ),
    array(
      'type' => 'long',
      'format' => 'D, d F Y - H:i',
      'locales' => array(),
    ),
  );
}

/**
 * Implements hook_library().
 */
function informea_library() {
  $smallipop_path = libraries_get_path('smallipop');
  return array(
    'smallipop' => array(
      'title' => 'Smallipop',
      'website' => 'http://projects.sebastianhelzle.net/jquery.smallipop/index.html',
      'version' => '0.6.2',
      'js' => array(
        $smallipop_path . '/lib/jquery.smallipop.min.js' => array(),
        $smallipop_path . '/lib/contrib/modernizr.js' => array()
      ),
      'css' => array(
        $smallipop_path . '/css/jquery.smallipop.min.css' => array()
      )
    ),
    'scrollto' => array(
      'title' => 'jquery.scrollTo',
      'website' => 'https://github.com/flesler/jquery.scrollTo',
      'version' => '1.4.14',
      'js' => array(
        libraries_get_path('scrollto') . '/jquery.scrollTo.min.js' => array()
      )
    ),
  );
}

function informea_subscribe_updates_form($form, &$form_state) {
  $form = array();

  $form['mail'] = array(
    '#attributes' => array('placeholder' => t('Enter email address')),
    '#type' => 'textfield'
  );

  $form['actions'] = array(
    '#type' => 'container'
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Send me updates'
  );

  return $form;
}


class MigrationUtil {

    /**
     * Transform custom escapes like <@#&> and <&#@> in HTML text.
     *
     * @param string $text
     *   Text to process
     *
     * @return string
     *     Decoded text
     */
    public static function decodeHTMLText($text) {
        $search  = array('<@#&>', '<&#@>');
        $replace = array('"', ',');
        $ret = str_replace($search, $replace, $text);
        $ret = html_entity_decode($ret);
        return $ret;
    }


    public static function setTranslation(&$translation_handler, $entity, $row, $language) {
        /* Don't translate en (default) */
        if ($language != $entity->language
            && !isset($entity->translations->data[$language])) {
            $translation_handler->setTranslation(array(
                'translate' => 0, 'status' => 1, 'uid' => 1,
                'language' => $language,
                'source' => $entity->language,
            ));
        }
    }

  public static function getOrCreateTerm($name, $vocabulary_name, $language = LANGUAGE_NONE) {
    if ($t = taxonomy_get_term_by_name($name, $vocabulary_name)) {
      return current($t);
    }
    else {
      if ($voc = taxonomy_vocabulary_machine_name_load($vocabulary_name)) {
        $term = (object) array(
          'name' => $name,
          'vid' => $voc->vid,
          'language' => $language,
          'vocabulary_machine_name' => $vocabulary_name,
          'tid' => NULL,
        );
        taxonomy_term_save($term);
        return $term;
      }
    }
    return FALSE;
  }
}

/**
 * Implements hook_i18n_string_helper_strings().
 */
function informea_i18n_string_helper_strings() {
  module_load_include('inc', 'informea', 'informea.translation');
  return _informea_localizable_strings();
}

function informea_fix_title_field() {
  drupal_set_message('Changing the size of title_field value');
  $column_size = 2048;
  db_change_field('field_data_title_field', 'title_field_value', 'title_field_value', array('type' => 'varchar','length' => $column_size));
  db_change_field('field_revision_title_field', 'title_field_value', 'title_field_value', array('type' => 'varchar','length' => $column_size));
}


function informea_no_content_available_block() {
  // Render "No data available (shown from code)" block
  $block = module_invoke('block', 'block_view', 5);
  return array('#type' => 'item', '#markup' => render($block['content']));
}

/**
 * Return http / https depending on the request
 */
function informea_get_request_protocol() {
  if (!empty($_SERVER['REQUEST_SCHEME']) && $_SERVER['REQUEST_SCHEME'] == 'https') {
    return 'https';
  }
  if (!empty($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS']) == 'on' || $_SERVER['HTTPS'] == 1)) {
    return 'https';
  }
  // CloudFlare
  if (!empty($_SERVER['X-Forwarded-Proto']) && strtolower($_SERVER['X-Forwarded-Proto']) == 'https') {
    return 'https';
  }
  // M$ stuff
  if (!empty($_SERVER['Front-End-Https']) && strtolower($_SERVER['Front-End-Https']) == 'on') {
    return 'https';
  }
  // Unreliable when crazy dude serves HTTP over 443 :-/
  if (!empty($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == 443) {
    return 'https';
  }
  return 'http';
}

/**
 * Implements hook_field_formatter_info().
 */
function informea_field_formatter_info() {
  return array(
    'external_url' => array(
      'label' => t('External URL to file'),
      'field types' => array('file')
    ),
    'informea_file_dropdown' => array(
      'label' => t('Dropdown'),
      'field types' => array('file'),
    ),
    'informea_pdf_js' => array(
      'label' => t('PDF JS viewport'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function informea_field_formatter_view($entity_type, $entity, $field, $instance, $lang_code, $items, $display) {
  $elements = array();
  switch ($display['type']) {
    case 'external_url':
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => theme('informea_field_formatter_external_url', array('element' => $item)),
        );
      }
      break;

    case 'informea_file_dropdown':
      if (!empty($items)) {
        $elements[0] = array(
          '#markup' => theme('informea_file_dropdown', array('items' => $items)),
        );
      }
      break;

    case 'informea_pdf_js':
      if (!empty($items)) {
        $elements[0] = array(
          '#markup' => theme('informea_pdf_js', array('files' => $items)),
        );
      }
      break;
  }
  return $elements;
}

function theme_informea_file_dropdown($variables) {
  $items = array();
  foreach ($variables['items'] as $file) {
    $url = file_create_url($file['uri']);
    if (!empty($file['description']) && strpos($file['description'], 'http') !== FALSE) {
      $url = $file['description'];
    }
    $items[] = array(
      'title' => $file['filename'],
      'href' => $url,
      'attributes' => array('target' => '_blank'),
    );
  }
  return theme('bootstrap_btn_dropdown', array(
    'attributes' => array(
      'data-label' => t('Files')
    ),
    'label' => t('Choose a file'),
    'links' => $items
  ));
}

function theme_informea_pdf_js($variables) {
  if (!empty($variables['files'])) {
    $files = $variables['files'];
    $url = NULL;
    foreach ($files as $file) {
      if ($file['filemime'] == 'application/pdf') {
        $url = file_create_url($file['uri']);
        break;
      }
    }
    if ($url)
    $link = url(
      'pdfjs',
      [
        'absolute' => 1,
        'query' => ['file' => $url]
      ]
    );
    return sprintf('<iframe mozallowfullscreen="true" webkitallowfullscreen="true" class="pdfjs decision" src="%s"></iframe>', $link);
  }
  return FALSE;
}

function informea_theme() {
  return array(
    'informea_field_formatter_external_url' => array(
      'template' => 'informea_field_formatter_external_url',
      'variables' => array(
        'element' => NULL,
      ),
      'path' => drupal_get_path('module', 'informea') . '/templates',
    ),
    'informea_file_dropdown' => array(
      'variables' => array('items'),
    ),
    'informea_pdf_js' => array(
      'variables' => array('files'),
      'path' => drupal_get_path('module', 'informea') . '/templates',
    ),
    'pdfjs_markup' => array(
      'template' => 'pdfjs_markup',
      'variables' => array('file'),
      'path' => drupal_get_path('module', 'informea') . '/templates',
    ),
    'informea_share_widget' => array(
      'variables' => array(
        'url' => '',
        'node' => array(),
      ),
      'template' => 'templates/informea_share_widget',
    ),
  );
}

function informea_taxonomy_term_view($term, $view_mode, $langcode) {
  if ($view_mode == 'full' && $term->vocabulary_machine_name == 'thesaurus_informea') {
    $breadcrumbs = array();
    $breadcrumbs[] = l(t('Glossary'), 'terms');
    $path = request_path();
    if (strpos($path,'/ecolex') !== false) {
      $breadcrumbs[] = l($term->name, 'taxonomy/term/' . $term->tid);
      $breadcrumbs[] = t('ECOLEX');
    }
    else {
      $breadcrumbs[] = $term->name;
    }
    informea_theme_set_page_breadcrumb($breadcrumbs);
  }
}

/**
 * Alter the content of the 'Global disclaimer' block
 */
function informea_block_view_block_4_alter(&$data, $block) {
  $content = '<div class="alert alert-info">';
  if (arg(0) == 'node') {
    $node = menu_get_object();
    if (!empty($node) && $node->type == 'treaty') {
      $context = _treaty_url_context(request_uri());
      $available_source = FALSE;
      $node_w = entity_metadata_wrapper('node', $node);
      //Set treaty website url
      switch ($context) {
        case 'text':
          $url = NULL;
          $treaty_text_url = $node_w->field_treaty_text_url->value();
          if (!empty($treaty_text_url)) {
            $url = $treaty_text_url;
          }
          else if ($treaty_website_url = $node_w->field_treaty_website_url->value()) {
            $url = $treaty_website_url;
          }
          $content .= t(
            'This information has been entered manually for the purpose of tagging individual treaty paragraphs with term concepts. In case of discrepancies the information on the MEA website prevails!mea_url. Please help us improve this site – report issues <a href="!contact_url">here</a>',
            array(
              '!mea_url' => !empty($url) ? ' (' . l(t('view here'), $url['url'], $url) . ')' : '',
              '!contact_url' => url('node/70411')

            )
          );
          $content .= '</div>';
          $data['content'] = $content;
          return;
          break;

        case 'protocols':
          $url = $node_w->field_treaty_protocols_url->value();
          break;

        case 'decisions':
          $url = $node_w->field_treaty_decisions_url->value();
          break;

        case 'national-reports':
          $url = $node_w->field_treaty_reports_url->value();
          break;

        case 'action-plans':
          $url = $node_w->field_treaty_plans_url->value();
          break;

        case 'parties':
          $url = $node_w->field_treaty_parties_url->value();
          break;
      }
      if (!isset($url) || empty($url)) {
        $url = $node_w->field_treaty_website_url->value();
      }
      $url = !empty($url['url']) ? $url['url'] : NULL;

      if ($url) {
        $available_source = TRUE;
        $content .= t('Source of information:');
        $content .= ' <a href="' . $url . '">' . $node_w->label() . ' ' .t('website') . '</a> ';
      }
      if ($context == 'parties') {
        $url_2 = $node_w->field_un_treaty_database_link->value();
        if (!empty($url_2['url'])) {
          $available_source = TRUE;
          if ($url != NULL) {
            $content .= t('and');
          }
          $content .= ' ' . l(t('United Nations Treaty Database'), $url_2['url'], $url_2);
        }
      }
      if ($available_source) {
        $content .= '.<br>';
      }

    }
  }
  $content .= str_replace(array('<p>','</p>'), '', $data['content']);
  $content .= l(t('here'), 'node/70411');
  $content .= '</div>';
  $data['content'] = $content;
}

/**
 * Implements hook_page_alter().
 */
function informea_page_alter(&$page) {
  if (module_exists('analytics_integration') && $ga_informea_key = variable_get('ga_informea_key', null)) {
    analytics_integration_add_google_analytics_library($ga_informea_key);
    $current_path = url(request_uri(), array('absolute' => TRUE));
    analytics_integration_google_analytics_send_hit($ga_informea_key, $current_path, 'informea', drupal_get_title(), 'pageview', false);
    /* UNEP webmaster request to send hits to monitor all affliate unep.org websites */
    analytics_integration_google_analytics_send_hit(ANALYTICS_INTEGRATION_UNEP, $current_path, 'unep', drupal_get_title());
  }
  else {
    drupal_set_message('Google Analytics is not configured correctly', 'error');
  }
}

/**
 * Remove news with duplicate title.
 *
 * @throws \Exception
 */
function informea_remove_duplicate_news() {
  // SELECT title FROM node WHERE TYPE = 'feed_item' GROUP BY title HAVING count(*) > 1
  $query = db_select('node', 'a')->fields('a', array('title'));
  $query->addExpression('COUNT(a.title)', 'tcount');
  $query->condition('a.`type`', 'feed_item');
  $query->groupBy('a.title');
  $query->havingCondition('tcount', 1, '>');
  $query->orderBy('a.nid');
  $result = $query->execute()->fetchCol();
  $nids = array();
  foreach($result as $title) {
    // SELECT nid FROM node WHERE title = '...' AND type = 'feed_item' ORDER BY nid DESC LIMIT 10 OFFSET 1;
    // Remove older duplicate nodes with same title
    $query = db_select('node', 'a')->fields('a', array('nid'));
    $query->condition('a.title', $title);
    $query->condition('a.type', 'feed_item');
    $query->orderBy('a.nid', 'DESC');
    $query->range(1, 10);
    $r = $query->execute()->fetchCol();
    $nids = array_merge($nids, $r);
    search_api_track_item_change('node', $nids);
  }
  watchdog('informea', 'Removing !count news having duplicate title', array('!count' => count($result)), WATCHDOG_INFO);
  node_delete_multiple($nids);
}

/**
 * Do not allow users to edit their own treaty assignment
 * @param $form
 */
function informea_form_user_profile_form_alter(&$form) {
  global $user;
  $form['field_user_treaties']['#access'] = $user->uid == 1 || user_access('administer users');
}

function informea_user_get_assigned_treaties($user) {
  $ret = array();
  try {
    if (!empty($user)) {
      $w = entity_metadata_wrapper('user', $user);
      foreach($w->field_user_treaties->value() as $treaty) {
        $ret[] = $treaty->nid;
      }
    }
  } catch(Exception $e) {
    watchdog_exception('informea', $e);
  }
  return $ret;
}

/**
 * Check node can be edited by MEA role.
 *
 * @param stdClass $user
 *   User to check
 * @param stdClass $node
 *   Node to check
 * @return bool
 *   Returns TRUE if user is NOT MEA, or is MEA and node's treaty matches the
 *   user's assigned treaties in field_user_treaties.
 */
function informea_user_mea_can_edit_node($node, $user) {
  if (in_array(ROLE_ADMINISTRATOR, $user->roles)) {
    return TRUE;
  }
  if (in_array(ROLE_MEA, $user->roles)) {
    $allowed = informea_user_get_assigned_treaties($user);
    $nid = NULL;
    try {
      $w = entity_metadata_wrapper('node', $node->nid);
      $nid = $w->field_treaty->value()[0]->nid;
    } catch(Exception $e) {
    }
    return in_array($nid, $allowed);
  }
  return FALSE;
}

function informea_mea_content_types() {
  return array(
    'action_plan', 'contact_person', 'decision', 'decision_paragraph',
    'event_calendar', 'geographical_site', 'member_party', 'national_report',
    'treaty_article', 'treaty_paragraph',
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function informea_form_node_form_alter(&$form, &$form_state, $form_id) {
  $bundle = $form['#node']->type;

  if (in_array($bundle, informea_mea_content_types())) {
    global $user;
    $user_is_mea = $user->uid != 1 && count($user->roles) == 2 && in_array(ROLE_MEA, $user->roles);

    // Warn the user when content comes from OData
    if (!empty($form['#node']->nid)) {
      try {
        $w = entity_metadata_wrapper('node', $form['#node']->nid);
        if ($w->field_original_id->value()) {
          drupal_set_message(t('This content is imported from MEA via synchronization process. <strong>Modifications made here might be lost after the next synchronization</strong>'), 'warning');
        }
      } catch (Exception $e) {
      }
    }

    // Hide some internal fields
    if (!empty($form['field_original_id'][LANGUAGE_NONE])) {
      $form['field_original_id'][LANGUAGE_NONE]['#access'] = FALSE;
    }

    // If the user is MEA role
    if ($user_is_mea) {
      // Do not let the user assign random treaties to content
      $form['#validate'][] = 'informea_node_form_validate_field_treaty';

      // Filter out the list of treaties in field_treaty.
      if (!empty($form['field_treaty']['und']['#options'])) {
        $allowed_treaties = informea_user_get_assigned_treaties($user);
        $options = &$form['field_treaty']['und']['#options'];
        if ($user->uid != 1 || !empty($allowed_treaties)) {
          foreach ($options as $nid => $label) {
            if ($nid != '_none' && !in_array($nid, $allowed_treaties)) {
              unset($options[$nid]);
            }
          }
        }
      }

      // Use custom autocomplete for field_treaty to filter autocomplete list of treaties
      if (!empty($form['field_treaty'][LANGUAGE_NONE]['#autocomplete_path'])) {
        /** @see informea_entityreference_autocomplete_field_treaty_callback */
        $autocomplete_path = "informea/autocomplete/single/field_treaty/node/$bundle/";
        $autocomplete_path .= !empty($form['#node']->nid) ? $form['#node']->nid : 'NULL';
        $form['field_treaty'][LANGUAGE_NONE]['#autocomplete_path'] = $autocomplete_path;
      }
    }

    // Use custom autocomplete for field_meeting to filter autocomplete list of treaties
    if (!empty($form['field_meeting'][LANGUAGE_NONE]['#autocomplete_path'])) {
      /** @see informea_entityreference_autocomplete_field_meeting_callback */
      $autocomplete_path = "informea/autocomplete/single/field_meeting/node/$bundle/";
      $autocomplete_path .= !empty($form['#node']->nid) ? $form['#node']->nid : 'NULL';
      $form['field_meeting'][LANGUAGE_NONE]['#autocomplete_path'] = $autocomplete_path;
    }

    // Fix cardinality for form fields.
    if ($bundle != 'contact_person' && !empty($form['field_treaty']['und'])) {
      $form['field_treaty']['und']['#multiple'] = FALSE;
    }
    if (!empty($form['field_country']['und'])) {
      $form['field_country']['und']['#multiple'] = FALSE;
    }

    // Hide the input format switcher from CSS it's annoying
    $form['#attached']['css'][] = array(
      'data' => 'fieldset.filter-wrapper.form-wrapper { display: none; }',
      'type' => 'inline',
    );
  }


  // Use custom autocomplete for field_meeting to filter autocomplete list of treaties
  if (!empty($form['field_sdg_goals'])) {
    /*
    SELECT a.* FROM node a
      INNER JOIN field_data_field_goal_type b ON a.nid = b.entity_id
      INNER JOIN field_data_field_goal_source c ON a.nid = c.entity_id
      WHERE a.type = 'goal'
        AND b.field_goal_type_tid IN (1734, 1737)
        AND c.field_goal_source_tid = 1753
        ORDER BY a.title;
    */
    $q = db_select('node', 'a')->fields('a', array('nid', 'title'));
    $q->join('field_data_field_goal_type', 'b', 'a.nid = b.entity_id');
    $q->join('field_data_field_goal_source', 'c', 'a.nid = c.entity_id');
    $q->condition('a.type', 'goal');
    $q->condition('b.field_goal_type_tid', array(1734, 1737), 'IN'); // Goal, Target (vid=30)
    $q->condition('c.field_goal_source_tid', 1753); // Sustainable development goals (vid=28)
    $q->orderBy('a.title');
    $form['field_sdg_goals'][LANGUAGE_NONE]['#options'] = $q->execute()->fetchAllKeyed();
  }
}

function informea_field_widget_entityreference_autocomplete_form_alter(&$element, &$form_state, $context) {
  if (!empty($context['field']) && $context['field']['field_name'] == 'field_sdg_goals' && !empty($element['target_id'])) {
    $element['target_id']['#autocomplete_path'] = 'goal/autocomplete/field_sdg_goals';
  }
}

function informea_node_form_validate_field_treaty($form, $form_state) {
  global $user;
  if (informea_user_is_mea($user)) {
    $allowed = informea_user_get_assigned_treaties($user);
    if (!empty($form_state['values']['field_treaty'][LANGUAGE_NONE][0]['target_id'])) {
      $id_treaty = $form_state['values']['field_treaty'][LANGUAGE_NONE][0]['target_id'];
      if (!in_array($id_treaty, $allowed)) {
        form_set_error('field_treaty', t('You do not have sufficient permissions to assign that treaty'));
      }
    }
  }
}


/**
 * Implements hook_custom_theme().
 */
function informea_custom_theme() {
  // match node/1
  if (arg(0) == 'node' && is_numeric(arg(1)) && $node = node_load(arg(1))) {
      if ($node->type == 'book') {
        return variable_get('admin_theme');
      }
  }
  return NULL;
}


function informea_user_is_mea($user) {
  if (empty($user) || $user->uid == 1) {
    return FALSE;
  }
  return count($user->roles) == 2
      && in_array(ROLE_MEA, $user->roles)
      && in_array('authenticated user', $user->roles);
}

function informea_pdfjs_view() {
  global $base_url;
  $q = $base_url;
  if (strpos($_GET['file'], '/') !== 0) {
    $q .= '/';
  }
  $q .= $_GET['file'];
  str_replace('..', '', $q);
  if (strpos(strtolower($q), '.pdf') !== strlen($q) - 4) {
    die();
  }
  print theme('pdfjs_markup', ['file' => $q]);
  die();
}


function informea_ecolex_treaty_link($nid) {
  $wrapper = entity_metadata_wrapper('node', $nid);
  try {
    if ($wrapper->field_original_id && $original_id = $wrapper->field_original_id->value()) {
      return sprintf('http://www.ecolex.org/treaty/details/%s', $original_id);
    }
  } catch (Exception $e) {}
  return false;
}

function informea_ecolex_literature_link($nid) {
  $wrapper = entity_metadata_wrapper('node', $nid);
  try {
    if ($wrapper->field_original_id && $original_id = $wrapper->field_original_id->value()) {
      return sprintf('http://www.ecolex.org/literature/details/%s', $original_id);
    }
  } catch (Exception $e) {}
  return false;
}

function informea_ecolex_legislation_link($nid) {
  $wrapper = entity_metadata_wrapper('node', $nid);
  try {
    if ($wrapper->field_original_id && $original_id = $wrapper->field_original_id->value()) {
      return sprintf('http://www.ecolex.org/legislation/details/%s', $original_id);
    }
  } catch (Exception $e) {}
  return false;
}

function informea_faolex_legislation_link($nid) {
  $wrapper = entity_metadata_wrapper('node', $nid);
  try {
    if ($wrapper->field_original_id && $original_id = $wrapper->field_original_id->value()) {
      return sprintf('http://www.fao.org/faolex/results/details/en/?details=%s', $original_id);
    }
  } catch (Exception $e) {}
  return false;
}
