<?php
/**
 * @file
 * Code for the goal feature.
 */

include_once 'goal.features.inc';

/**
 * Implements hook_menu().
 */
function goal_menu() {

  $items = array();

  $items['goal/autocomplete/field_sdg_goals'] = array(
    'title' => 'SDG goals Autocomplete',
    'page callback' => 'sdg_goals_autocomplete_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback for SDG goals autocomplete.
 *
 * @param $string
 */
function sdg_goals_autocomplete_callback($string) {
  $matches = [];

  $args = func_get_args();
  $string = implode('/', $args);

  $q = db_select('node', 'n');
  $q->innerJoin('field_data_field_goal_source', 'gs', 'n.nid = gs.entity_id');
  $q->fields('n', ['nid', 'title']);
  $q->condition('gs.field_goal_source_tid', '1753'); /* SDG goals */
  $q->condition('n.title', '%' . db_like($string) . '%', 'LIKE');
  $items = $q->execute()->fetchAllKeyed();
  foreach ($items as $nid => $title) {
    $matches["{$title} ({$nid})"] = '<div class="reference-autocomplete">' . $title . '</div>';
  }

  drupal_json_output($matches);
}

function goal_theme() {
  return array(
    'goals_listing' => array(
      'render element' => 'element',
      'template' => 'templates/goals-listing',
      'variables' => array('goals'),
      'path' => drupal_get_path('module', 'goal'),
    ),
    'goal_text_tags' => array(
      'render element' => 'element',
      'template' => 'templates/goal-text-tags',
      'variables' => array('tags'),
      'path' => drupal_get_path('module', 'goal'),
    ),
    'goal_text' => array(
      'render element' => 'element',
      'template' => 'templates/goal-text',
      'variables' => array('goal', 'base_goal_url'),
      'path' => drupal_get_path('module', 'goal'),
    ),
    'goal_target' => array(
      'render element' => 'element',
      'template' => 'templates/goal-target',
      'variables' => array('goal', 'target', 'base_goal_url'),
      'path' => drupal_get_path('module', 'goal'),
    ),
    'goal_target_indicator' => array(
      'render element' => 'element',
      'template' => 'templates/goal-target-indicator',
      'variables' => array('goal', 'target', 'indicator', 'base_goal_url'),
      'path' => drupal_get_path('module', 'goal'),
    ),
    'goal_related_content' => array(
      'render element' => 'element',
      'template' => 'templates/goal-related-content',
      'variables' => array('items'),
      'path' => drupal_get_path('module', 'goal'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function goal_block_info() {
  $blocks = [
    'goal_related_content_block' => [
      'info' => t('Goal related content'),
      'cache' => DRUPAL_NO_CACHE,
      'status' => 1,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => '',
    ],
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function goal_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'goal_related_content_block':
      $ob = menu_get_object();
      if (!empty($ob) && $ob->type == 'goal') {
        drupal_add_js(drupal_get_path('module', 'goal') . '/js/goal.js');
        drupal_add_library('informea', 'scrollto');
        drupal_add_library('informea', 'smallipop');
        drupal_add_css(drupal_get_path('module', 'goal') . '/styles/goal.css');

        $ob_w = entity_metadata_wrapper('node', $ob);
        $type = $ob_w->field_goal_type->value();
        switch ($type->name) {
          case 'Goal':
            $ob->targets = _get_goal_children($ob_w->field_goal_source->value(), $ob, 'Target');
            if (!empty($ob->targets)) {
              $block['content'] = '<h3>' . t('Targets') . '</h3>';
              $block['content'] .= '<div class="children-container"><div class="accordion panel-group panel-collapse collapse in" role="tabpanel">';
              foreach ($ob->targets as $target) {
                $target->indicators = _get_goal_children($ob_w->field_goal_source->value(), $target, 'Indicator');
                $block['content'] .= theme('goal_target', array('goal' => $ob, 'target' => $target, 'base_goal_url' => url('taxonomy/term/' . $ob_w->field_goal_source->value()->tid, ['absolute' => TRUE,])));
              }
              $block['content'] .= '</div></div>';
            }
            break;
          case 'Target':
            $parent = $ob_w->field_parent_goal->value();
            if (!empty($parent) && is_array($parent)) {
              $parent = reset($parent);
            }
            $ob->indicators = _get_goal_children($ob_w->field_goal_source->value(), $ob, 'Indicator');
            if (!empty($ob->indicators)) {
              $block['content'] = '<h3>' . t('Indicators') . '</h3>';
              $block['content'] .= '<div class="children-container"><div class="accordion panel-group panel-collapse collapse in" role="tabpanel">';
              foreach ($ob->indicators as $indicator) {
                $block['content'] .= theme('goal_target_indicator', array('goal' => $parent, 'target' => $ob, 'indicator' => $indicator, 'base_goal_url' => url('taxonomy/term/' . $ob_w->field_goal_source->value()->tid, ['absolute' => TRUE,])));
              }
              $block['content'] .= '</div></div>';
            }
            break;
          default:
            $block['content'] = '';
        }
        $items = goal_get_related_content($ob->nid);
        if (!empty($items)) {
          $block['content'] .= '<h3>' . t('Related content') . '</h3>';
          $block['content'] .= theme('goal_related_content', array('items' => $items));
        }
      }
      break;
  }
  return $block;
}

function goal_get_related_content($goal_nid) {
  $return = [];
  $nids = db_select('field_data_field_sdg_goals', 'g')
    ->fields('g', ['entity_id', 'bundle'])
    ->condition('g.bundle', ['national_report_paragraph', 'treaty_article', 'treaty_paragraph' , 'decision_paragraph'], 'IN')
    ->condition('g.field_sdg_goals_target_id', $goal_nid)
    ->execute()->fetchAllKeyed();
  if (!empty($nids)) {
    // Get the national reports
    $q = db_select('field_data_field_parent_national_report', 'p');
    $q->innerJoin('field_data_field_treaty', 't', 'p.field_parent_national_report_target_id = t.entity_id');
    $q->fields('p', ['entity_id', 'field_parent_national_report_target_id'])
      ->fields('t', ['field_treaty_target_id'])
      ->condition('p.entity_id', array_keys($nids), 'IN');
    $paragraphs = $q->execute()->fetchAll();
    foreach ($paragraphs as $paragraph) {
      $treaty_id = $paragraph->field_treaty_target_id;
      $national_report_id = $paragraph->field_parent_national_report_target_id;
      if (empty($return[$treaty_id])) {
        $treaty = node_load($treaty_id);
        $treaty->national_reports = [];
        $return[$treaty_id] = $treaty;
      }
      if (empty($return[$treaty_id]->national_reports[$national_report_id])) {
        $national_report = node_load($national_report_id);
        $national_report->children = [];
        $return[$treaty_id]->national_reports[$national_report_id] = $national_report;
      }
      $paragraph = node_load($paragraph->entity_id);
      $return[$treaty_id]->national_reports[$national_report_id]->children[] = $paragraph;
    }
    // Get the treaty articles
    $q = db_select('field_data_field_parent_treaty_article', 'a');
    $q->innerJoin('field_data_field_treaty', 't', 'a.field_parent_treaty_article_target_id = t.entity_id');
    $q->fields('a', ['entity_id', 'field_parent_treaty_article_target_id'])
      ->fields('t', ['field_treaty_target_id'])
      ->condition('a.entity_id', array_keys($nids), 'IN');
    $paragraphs = $q->execute()->fetchAll();
    foreach ($paragraphs as $paragraph) {
      $treaty_id = $paragraph->field_treaty_target_id;
      $article_id = $paragraph->field_parent_treaty_article_target_id;
      if (empty($return[$treaty_id])) {
        $treaty = node_load($treaty_id);
        $treaty->national_reports = [];
        $return[$treaty_id] = $treaty;
      }
      if (empty($return[$treaty_id]->treaty_articles[$article_id])) {
        $article = node_load($article_id);
        $article->children = [];
        $return[$treaty_id]->treaty_articles[$article_id] = $article;
      }
      $paragraph = node_load($paragraph->entity_id);
      $return[$treaty_id]->treaty_articles[$article_id]->children[] = $paragraph;
    }
 // Get the decisions
    $q = db_select('field_data_field_parent_decision  ', 'p');
    $q->innerJoin('field_data_field_treaty', 't', 'p.field_parent_decision_target_id  = t.entity_id');
    $q->fields('p', ['entity_id', 'field_parent_decision_target_id '])
      ->fields('t', ['field_treaty_target_id'])
      ->condition('p.entity_id', array_keys($nids), 'IN');
    $paragraphs = $q->execute()->fetchAll();
    foreach ($paragraphs as $paragraph) {
      $treaty_id = $paragraph->field_treaty_target_id;
      $decision_id = $paragraph->field_parent_decision_target_id ;
      if (empty($return[$treaty_id])) {
        $treaty = node_load($treaty_id);
        $treaty->decisions = [];
        $return[$treaty_id] = $treaty;
      }
      if (empty($return[$treaty_id]->decisions[$decision_id])) {
        $decision =node_load($decision_id);
        $decision->children=[];
        $return[$treaty_id]->decisions[$decision_id] = $decision;
      }
      $paragraph = node_load($paragraph->entity_id);
      $return[$treaty_id]->decisions[$decision_id]->children[] = $paragraph;
    }
  }
    return $return;
}

function goal_preprocess_goal_target_indicator(&$variables) {
  if (arg(0) == 'node' && !empty(arg(1)) && is_numeric(arg(1))) {
    $goal = is_array($variables['goal']) ? reset($variables['goal']) : $variables['goal'];
    $source = $goal->field_goal_source;
    if (!empty($source) && !empty($source[LANGUAGE_NONE])) {
      $variables['theme_hook_suggestions'][] = 'goal_target_indicator__' . $source[LANGUAGE_NONE][0]['tid'];
    }
  }
  else {
    $variables['theme_hook_suggestions'][] = 'goal_target_indicator__' . arg(2);
  }
}

function _get_goal_source_goals($source, $type_of_goals) {
  if (empty($source) || empty($type_of_goals)) {
    return array();
  }

  $goal_type_tid = NULL;
  if ($goal_type = taxonomy_get_term_by_name($type_of_goals, 'type_of_goal')) {
    $goal_type_tid = reset($goal_type)->tid;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'goal')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_goal_source', 'tid', $source->tid)
    ->fieldCondition('field_goal_type', 'tid', $goal_type_tid);
  $result = $query->execute();
  $ret = !empty($result['node']) ? $result['node'] : [];

  if (!empty($ret)) {
    $q = db_select('field_data_field_sorting_order', 'o')
      ->fields('o', ['entity_id', 'field_sorting_order_value'])
      ->condition('o.entity_id', array_keys($ret), 'IN');
    $sorting_order = $q->execute()->fetchAllKeyed();

    usort($ret, function ($a, $b) use ($sorting_order) {
      $sorting_a = !empty($sorting_order[$a->nid]) ? $sorting_order[$a->nid] : -1;
      $sorting_b = !empty($sorting_order[$b->nid]) ? $sorting_order[$b->nid] : -1;
      return ($sorting_a < $sorting_b) ? -1 : 1;
    });
  }

  return $ret;
}

function _get_goal_children($source, $parent, $type_of_goals) {
  $nodes = array();
  $query = new EntityFieldQuery();

  $goal_type_tid = NULL;
  if ($goal_type = taxonomy_get_term_by_name($type_of_goals, 'type_of_goal')) {
    $goal_type_tid = reset($goal_type)->tid;
  }

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'goal')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_goal_source', 'tid', $source->tid)
    ->fieldCondition('field_goal_type', 'tid', $goal_type_tid)
    ->fieldCondition('field_parent_goal', 'target_id', $parent->nid)
    ->propertyOrderBy('title', 'ASC');

  if ($result = $query->execute()) {
    $nodes = $result['node'];
  }

  return $nodes;
}

function goal_taxonomy_term_view($term, $view_mode, $langcode) {
  if ($term->vocabulary_machine_name == 'goal_sources' && $view_mode == 'full') {
    drupal_add_js(drupal_get_path('module', 'goal') . '/js/goal.js');
    drupal_add_library('informea', 'scrollto');
    drupal_add_library('informea', 'smallipop');
    drupal_add_css(drupal_get_path('module', 'goal') . '/styles/goal.css');
    switch ($term->tid) {
      case '1738':
        // Magic number for Aichi Biodiversity Targets
        $goal_type = 'Strategic goal';
        $target_type = 'Aichi Target';
        break;
      case '1739':
        // Magic number for GEG. We only show the view
        hide($term->content);
        $goal_type = '';
        $target_type = '';
        break;
      case '1740':
        // Magic number for MDG's
        $goal_type = 'Goal';
        $target_type = 'Target';
        break;
      case '1753':
        // Magic number for SDG's
        $goal_type = 'Goal';
        $target_type = 'Target';
        break;
      default:
        $goal_type = '';
        $target_type = '';
    }
    $goals = _get_goal_source_goals($term, $goal_type);
    foreach ($goals as $goal) {
      $targets = _get_goal_children($term, $goal, $target_type);
      foreach ($targets as $target) {
        $target->indicators = _get_goal_children($term, $target, 'Indicator');
      }
      $goal->targets = $targets;
    }
    $term->content['goals'] = array(
      '#type' => 'item',
      '#weight' => 10,
      '#markup' => theme(
        'goals_listing', array('term' => $term, 'goals' => $goals)
      ),
    );
  }
}

function goal_link($node, $suffix = '') {
  $wrapper = entity_metadata_wrapper('node', $node);
  $goal = $wrapper->field_goal_source->value();
  return url('taxonomy/term/' . $goal->tid . $suffix);
}
