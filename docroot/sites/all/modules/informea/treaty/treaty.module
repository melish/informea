<?php
/**
 * @file
 * Code for the treaty feature.
 */

include_once 'treaty.features.inc';

use Drupal\akoma_ntoso\AkomaNtoso;
use Drupal\akoma_ntoso\Elements\Element as AkomaNtosoElement;
use Drupal\akoma_ntoso\Elements\Document as AkomaNtosoDocument;

define('INFORMEA_TREATY_TEXT_ALLOWED_TAGS', '<table><tr><td><th><tbody><thead><b><i><em><strong>');

/**
 * Implements hook_menu().
 */
function treaty_menu() {
  $items = array();
  $treaty_view_types = _treaty_url_get_custom_node_view_types();
  foreach ($treaty_view_types as $type) {
    $items['node/%node/' . $type] = array(
      'title callback' => 'node_page_title',
      'title arguments' => array(1),
      'page callback' => 'treaty_custom_view_node',
      'page arguments' => array(1, 2),
      'access callback' => 'node_access',
      'access arguments' => array('view', 1),
    );
  }
  $items['informea/autocomplete/single/field_parent_treaty_article/node/treaty_paragraph'] = array(
    'title' => 'Entity Reference Autocomplete',
    'page callback' => 'informea_entityreference_treaty_article_autocomplete_callback',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => 'entityreference_autocomplete_access_callback',
    'access arguments' => array(2, 3, 4, 5),
    'file' => 'treaty.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_ctools_plugin_directory().
 */
function treaty_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return 'plugins/ctools/' . $plugin_type;
  }
}


/**
 * Implements hook_entity_info_alter().
 */
function treaty_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['treaty_listing'] = array(
    'label' => t('Treaty listing'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_views_plugins().
 */
function treaty_views_plugins() {
  return array(
    'access' => array(
      'reorder decisions' => array(
        'title' => t('Permission to reorder decisions'),
        'help' => t('Granted to reorder treaty decisions (must own node)'),
        'handler' => 'views_plugin_access_reorder_decisions',
        'uses options' => FALSE,
        'path' => drupal_get_path('module', 'treaty') . '/includes/plugins',
      ),
    ),
  );
}

/**
 *  Implements hook_url_inbound_alter().
 */
function treaty_url_inbound_alter(&$path, $original_path, $path_language) {
  module_load_include('inc', 'treaty', 'treaty.api');
  $path = treaty_url_match_node($path);
}

function treaty_url_match_node($path) {
  $args = arg();
  $types = _treaty_url_get_custom_node_view_types();
  $last_part = end($args);
  if (in_array($last_part, $types)) {
    $alias = str_replace('/' . $last_part, '', $path);
    if (!preg_match("/node\/[\d]{1,99}$/", $alias)) {
      $path_alias = path_load(array('alias' => $alias));
      if (!empty($path_alias)) {
        return $path_alias['source'] . '/' . $last_part;
      }
    }
  }
  return $path;
}

function _treaty_url_context($path) {
  $args = arg();
  $types = _treaty_url_get_custom_node_view_types();
  $last_part = end($args);
  if (in_array($last_part, $types)) {
    return $last_part;
  }
  return '';
}

function _treaty_url_get_custom_node_view_types() {
  return array(
    'text',
    'print',
    'protocols',
    'decisions',
    'parties',
    'national-reports',
    'action-plans',
  );
}

function informea_field_extra_fields() {
  $extra = array();
  $extra['node']['treaty']['display']['computed_number_of_parties'] = array(
    'label' => t('Number of parties'),
    'description' => t('This is a computed field, no stored locally'),
    'weight' => 50, // default weight
  );
  return $extra;
}

/**
 * Implement hook_theme().
 *
 * {@inheritdoc}
 */
function treaty_theme() {
  return array(
    'treaty_text' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-text',
      'variables' => array('articles', 'node'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_print' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-print',
      'variables' => array('articles', 'node'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_text_article' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-text-article',
      'variables' => array('article', 'odata_identifier'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_text_paragraph' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-text-paragraph',
      'variables' => array('paragraph', 'article'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_text_tags' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-text-tags',
      'variables' => array('tags'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_meetings' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-meetings',
      'variables' => array('meetings'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_decisions' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-decisions',
      'variables' => array('decisions'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_protocols' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-protocols',
      'variables' => array('protocols'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_global' => array(
      'variables' => array(
        'treaties' => NULL
      ),
      'render element' => 'content',
      'path' => drupal_get_path('module', 'treaty'),
      'template' => 'templates/treaty-global'
    ),
    'treaties' => array(
      'render element' => 'element',
      'template' => 'templates/treaties',
      'variables' => array('regions', 'treaties'),
      'path' => drupal_get_path('theme', 'informea_theme'),
    )
  );
}

/**
 * Menu callback for node/%node/view_type.
 */
function treaty_custom_view_node($node, $context) {
  // Do not process non-treaty
  if ($node->type != 'treaty') {
    return node_view($node);
  }

  // Build view mode full - this is the starting point.
  node_build_content($node, 'full');
  $node->context = _treaty_url_context(request_uri());
  // Adds the country JavaScript file to the page.
  drupal_add_js(drupal_get_path('module', 'treaty') . '/js/treaty.js');
  $odata_identifier = treaty_get_odata_identifier($node);
  foreach (element_children($node->content) as $field_name) {
    hide($node->content[$field_name]);
  }
  switch ($context) {
    case 'text':
      drupal_add_library('informea', 'scrollto');
      drupal_add_library('informea', 'smallipop');
      drupal_add_css(drupal_get_path('module', 'treaty') . '/styles/treaty.css');
      $articles = treaty_get_treaty_text($node->nid);
      $node->last_modification_date = treaty_text_get_last_modification_date($node->nid);
      $node->content['context'] = array(
        '#type' => 'item', '#weight' => 10, '#markup' => theme('treaty_text', array('articles' => $articles, 'node' => $node)),
      );
      break;

    case 'print':
      $articles = treaty_get_treaty_text($node->nid);
      echo theme('treaty_print', array('treaty' => $node, 'articles' => $articles));
      drupal_exit();

      break;

    case 'protocols':
      module_load_include('inc', 'treaty', 'treaty.api');
      $data = treaty_get_child_protocols($node->nid);
      if (empty($data)) {
        $node->content['context'] = informea_no_content_available_block();
        return;
      }
      $node->content['context'] = array(
        '#type' => 'item', '#weight' => 10, '#markup' => theme('treaty_protocols', array('protocols' => $data)),
      );
      break;

    case 'decisions':
      module_load_include('inc', 'decision', 'decision.api');
      $data = decision_get_treaty_decisions_group_by_meeting($node->nid);
      if (empty($data)) {
        $node->content['context'] = informea_no_content_available_block();
        return;
      }
      drupal_add_library('informea', 'scrollto');
      if ($odata_identifier != 'cites') {
        $node->content['context'] = array(
          '#markup' => theme('treaty_meetings', array('meetings' => $data)),
          '#type' => 'item',
          '#weight' => 10
        );
      }
      else {
        $decisions = array();
        $resolutions = array();
        foreach ($data as $mid => $row) {
          foreach ($row->decisions as $did => $decision) {
            $type = !empty($decision->field_decision_type[LANGUAGE_NONE][0]['tid']) ? $decision->field_decision_type[LANGUAGE_NONE][0]['tid'] : '';
            if ($type == 844 /* resolution */) {
              $resolutions[$did] = $decision;
            }
            else {
              $decisions[$did] = $decision;
            }
          }
        }
        $tabs = array(
          'decisions' => array(
            'header' => t('Decisions'),
            'body' => theme('treaty_decisions', array('decisions' => $decisions)),
            'active' => TRUE,
          ),
          'resolutions' => array(
            'header' => t('Resolutions'),
            'body' => theme('treaty_decisions', array('decisions' => $resolutions)),
          )
        );
        $node->content['context'] = array(
          array('#type' => 'item', '#weight' => 10, '#markup' => theme('informea_bootstrap_tabs', array('elements' => $tabs)))
        );
      }
      break;

    case 'parties':
      // Use Cartagena and Nagoya nids to color Greenland only for CBD.
      $cartagena_nid = 262;
      $nagoya_nid = 263;
      $nkl_nid = 318;

      module_load_include('inc', 'country_data', 'country_data.api');
      module_load_include('php', 'informea', 'recaptcha/recaptchalib');
      $members = country_data_treaty_get_membership($node->nid);
      $other_members = country_data_treaty_get_membership($node->nid, $other = TRUE);
      if (empty($members) && empty($other_members)) {
        $node->content['context'] = informea_no_content_available_block();
        return;
      }
      if (count($members)) {
        // Add map with parties.
        $map_config = array();
        foreach ($members as $party) {
          $w = entity_metadata_wrapper('node', $party);
          $obs = $w->field_country->value();
          $country = $obs[0];
          $cw = entity_metadata_wrapper('node', $country);
          $iso2 = $cw->field_country_iso2->value();
          $map_config[] = array('id' => $iso2);
          if ($iso2 == 'DK' && !in_array($node->nid, array($nkl_nid, $cartagena_nid, $nagoya_nid))) {
            $map_config[] = array('id' => 'GL', 'balloonText' => t('Denmark'));
          }
          if ($iso2 == 'CN') {
            $map_config[] = array('id' => 'TW', 'balloonText' => t('China'));
          }
        }
        edw_amcharts_add_map('high');
        drupal_add_js(array('map' => array('memberParties' => $map_config)), array('type' => 'setting'));
        drupal_add_js(drupal_get_path('module', 'treaty') . '/js/parties.js');

        // Render the map disclaimer block (map_disclaimer)
        $block = module_invoke('block', 'block_view', 3);
        $elements = array(
          '#type' => 'item',
          '#markup' => '<div id="ammap_div" style="width: 100%; height: 500px;"></div>' . render($block['content']),
        );
        $map_tab = array(
          'header' => t('Map of Parties'),
          'body' => drupal_render($elements),
        );

        // Tables with parties.
        $table_1 = theme('table', treaty_create_table_with_members($members, $node));
        $table_2 = count($other_members)
          ? '<h1>' . t('Non-Parties') . '</h1>' . theme('table', treaty_create_table_with_members($other_members, $node))
          : '&nbsp;';
        $elements = array(
          '#type' => 'item',
          '#weight' => 10,
          '#markup' => $table_1 . $table_2,
        );
        $parties_tab = array(
          'header' => t('List of Parties'),
          'body' => drupal_render($elements),
        );
        $node->content['context'] = array(
          array(
            '#type' => 'item',
            '#weight' => 10,
            '#markup' => theme('informea_bootstrap_tabs',
              array(
                'elements' => array(
                  $map_tab,
                  $parties_tab,
                ),
              )
            ),
          ),
        );
      }
      break;

    case 'national-reports':
      module_load_include('inc', 'country_deliverable', 'country_deliverable.api');
      module_load_include('inc', 'country_deliverable');
      $render = array();
      // Reporting obligations.
      $rod = country_deliverable_get_reporting_obligation_cycles($node->nid);
      $rod_rendered = country_deliverable_render_rod($node->nid, $rod);
      if (!empty($rod_rendered)) {
        $render[] = $rod_rendered;
      }
      // National reports.
      $rows = country_deliverable_national_reports_group_by_country($node->nid);
      if (!empty($rows)) {
        if (!empty($rod)) {
          $render[] = array(
            '#type' => 'item',
            '#weight' => 5,
            '#markup' => t('National reports'),
            '#prefix' => '<h2>',
            '#suffix' => '</h2>',
          );
        }
        $render[] = country_deliverable_render_national_reports($rows);
        $node->content['context'] = $render;
      }
      else {
        $node->content['context'] = informea_no_content_available_block();
        return;
      }
      break;

    case 'action-plans':
      module_load_include('inc', 'country_deliverable', 'country_deliverable.api');
      module_load_include('inc', 'country_deliverable');
      $rows = country_deliverable_action_plans_group_by_country($node->nid);
      if (empty($rows)) {
        $node->content['context'] = informea_no_content_available_block();
        return;
      }
      $node->content['context'] = country_deliverable_render_action_plans($rows);
      break;
  }

  return $node->content;
}

/**
 * Implements hook_node_view().
 */
function treaty_node_view($node, $view_mode, $langcode) {
  $extrafields = field_extra_fields_get_display('node', $node->type, $view_mode);
  $extrafield_name = 'computed_number_of_parties';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {
    // Your logic here.
    $label = t('Number of parties');
    module_load_include('inc', 'country_data', 'country_data.api');
    $value = country_data_treaty_count_membership($node->nid);
    $node->content[$extrafield_name] = array(
      '#markup' => <<<EOT
        <div class="field field-name-field-computed-number-of-parties field-type-link-field field-label-inline clearfix"><div class="field-label">$label:&nbsp;</div><div class="field-items"><div class="field-item even">$value</div></div></div>
EOT
    );
  }
  if ($node->type == 'treaty' && $view_mode == 'full') {
    // Adds the country JavaScript file to the page.
    drupal_add_js(drupal_get_path('module', 'treaty') . '/js/treaty.js');
    $context = _treaty_url_context(request_uri());
    $node->context = $context;
    $breadcrumbs = array(l(t('Treaties'),'treaties'),l($node->title, 'node/' . $node->nid));

    $node_w = entity_metadata_wrapper('node', $node);
    $informea_url = 'http://www.informea.org/treaties/' . $node_w->field_odata_identifier->value();
    $ga_informea_key = variable_get('ga_informea_key');

    switch ($context) {
      case 'export':
        treaty_export_text_to_xml($node);
        break;
    }
    informea_theme_set_page_breadcrumb($breadcrumbs);

    if (module_exists('analytics_integration')) {
      if ($node_w->field_original_id->value()) {
        $url = informea_ecolex_treaty_link($node->nid);
        analytics_integration_google_analytics_send_hit(ANALYTICS_INTEGRATION_ECOLEX, $url, 'ecolex', $node_w->label());
      }
      $google_analytics_keys = analytics_integration_get_node_keys($node, 'field_treaty', 'Google Analytics');
      $piwik_keys = analytics_integration_get_node_keys($node, 'field_treaty', 'Piwik');
      analytics_integration_google_analytics_send_hit($ga_informea_key, $informea_url, 'informea', $node_w->label());
      if (!empty($google_analytics_keys)) {
        treaty_ga_send_pageview($node, $google_analytics_keys, $context);
      }
      if (!empty($piwik_keys)) {
        treaty_piwik_send_pageview($node, $piwik_keys, $context);
      }
    }
  }
}

function treaty_create_table_with_members($members, $node) {
  $rows = array();
  foreach ($members as $member) {
    $wrapper = entity_metadata_wrapper('node', $member);
    $country = $wrapper->field_country->value()[0];
    $c_wrapper = entity_metadata_wrapper('node', $country);
    $themedir = drupal_get_path('theme', 'informea_theme');
    $flag = theme('image', array(
      'path' => $themedir . '/img/flags/flag-' . strtolower($c_wrapper->field_country_iso2->value()) . '.png',
      'attributes' => array('class' => 'img-thumbnail flag-small')
    ));
    $date1_unix = $wrapper->field_party_date_1->value();
    $date1 = empty($date1_unix) ? '&nbsp;' : format_date($date1_unix, 'short');
    $date2_unix = $wrapper->field_party_date_2->value();
    $date2 = empty($date2_unix) ? '&nbsp;' : format_date($date2_unix, 'short');
    $status_label = '';
    if ($status = $wrapper->field_party_status->value()) {
      $status_label = $status->name;
    }
    $entry_into_force_unix = $wrapper->field_entry_into_force->value();
    $entry_into_force = empty($entry_into_force_unix) ? '&nbsp;' : format_date($entry_into_force_unix, 'short');
    $light_blue_class = '';

    if ((empty($entry_into_force_unix) || $entry_into_force_unix > time())
      && (strtotime('-3 month', time()) < $date2_unix)) {
      $light_blue_class = 'party-row-light-blue';
    }

    $row = array(
      'data' => array(
        array(
          'data' => sprintf('%s <span>%s</span>', $flag, $wrapper->field_country->label()),
          'class' => $light_blue_class,
        ),
        array('data' => $date1, 'class' => 'text-center ' . $light_blue_class),
        array('data' => $date2, 'class' => 'text-center ' . $light_blue_class),
        array('data' => $status_label, 'class' => 'text-center ' . $light_blue_class),
        array('data' => $entry_into_force, 'class' => 'text-center ' . $light_blue_class),
      ),
    );
    $nfps = country_data_get_treaty_focal_points($country->nid, $node->nid);
    if (count($nfps)) {
      $row['data'][] = array(
        'data' => sprintf('<a data-toggle="collapse" href="#nfp-%1$s" aria-expanded="false" aria-controls="nfp-%1$s"><i class="glyphicon glyphicon-user"></i></a>', $country->nid),
        'class' => 'text-center ' . $light_blue_class,
      );
    }
    else {
      $row['data'][] = array(
        'data' => '&nbsp;',
        'class' => $light_blue_class,
      );
    }
    $rows[] = $row;
    if (count($nfps)) {
      $nfp_data = country_data_render_focal_points($nfps, $node);
      $row = array(
        'class' => array('collapse'),
        'data' => array(
          array(
            'data' => drupal_render($nfp_data),
            'colspan' => 5
          )
        ),
        'id' => array('nfp-' . $country->nid)
      );
      $rows[] = $row;
    }
  }
  $table = array(
    'attributes' => array(
      'id' => 'table-parties',
      'class' => 'table-no-striping'
    ),
    'header' => array(
      t('Party'),
      array('data' => t('Signature'), 'class' => array('text-center')),
      array('data' => t('Ratification'), 'class' => array('text-center')),
      array('data' => t('Status'), 'class' => array('text-center')),
      array('data' => t('Party'), 'class' => array('text-center')),
      array('data' => t('Focal points'), 'class' => array('text-center'))
    ),
    'rows' => $rows
  );
  return $table;
}

/**
 * Implements hook_page_alter().
 */
function treaty_page_alter(&$page) {
  if (!empty($page['content']['system_main']['nodes'])) {
    foreach ($page['content']['system_main']['nodes'] as $nid => &$node) {
      // Move legislation chart to secondary region
      if (isset($node['#node']->context) && $node['#node']->type == 'treaty') {
        // Hide fields in some view modes.
        if ($node['#node']->context != '') {
          foreach (element_children($node) as $element_id) {
            hide($node[$element_id]);
          }
        }
        switch ($node['#node']->context) {
          case '':
          case 'text':
          case 'protocols':
          case 'decisions':
          case 'parties':
          case 'national-reports':
          case 'action-plans':
            show($node['context']);
        }
      }
    }
  }
}

function treaty_treaty_contextual_menu_alter(&$contextual_menu, $node, $hide = array()) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $data_source = @$wrapper->field_data_source->value()[0]->tid;
  if ($node->type == 'treaty' && $data_source == DATA_SOURCE_ECOLEX) {
    $contextual_menu = null;
    return;
  }
  else if ($node->type == 'treaty') {
    module_load_include('inc', 'country_deliverable', 'country_deliverable.api');
    module_load_include('inc', 'country_data', 'country_data.api');
    module_load_include('inc', 'decision', 'decision.api');
    module_load_include('inc', 'treaty', 'treaty.api');

    $node_url = url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => TRUE));
    $wrapper = entity_metadata_wrapper('node', $node);
    $contextual_menu = array(
      '#theme' => 'item_list',
      '#attributes' => array('class' => array('nav', 'nav-pills', 'nav-stacked'))
    );
    $d_count = decision_count_treaty_decisions($node->nid);
    $nr_count = country_deliverable_count_treaty_national_reports($node->nid);
    $ap_count = country_deliverable_count_treaty_action_plans($node->nid);
    $p_count = country_data_treaty_count_membership($node->nid);
    $menu_items = array(
      '' => array(
        'title' => t('Summary')
      ),
      'protocols' => array(
        'title' => t('Protocols'),
        'count' => treaty_count_child_protocols($node->nid)
      ),
      'text' => array(
        'title' => t('Treaty text')
      ),
      'decisions' => array(
        'title' => t('Decisions'),
        'count' => $d_count,
      ),
      'parties' => array(
        'title' => t('Parties'),
        'count' => $p_count,
      ),
      'national-reports' => array(
        'title' => t('National reports'),
        'count' => $nr_count,
      ),
      'action-plans' => array(
        'title' => t('National plans'),
        'count' => $ap_count,
      )
    );

    $text = treaty_get_treaty_text($node->nid);
    if (empty($text)) {
      $menu_items['text']['disabled'] = TRUE;
    }

    if (treaty_count_child_protocols($node->nid) == 0) {
      unset($menu_items['protocols']);
    }
    if ($d_count == -1) {
      $menu_items['decisions']['count'] = t('n/a');
    }
    if ($nr_count == -1) {
      $menu_items['national-reports']['count'] = t('n/a');
    }
    if ($ap_count == -1) {
      $menu_items['action-plans']['count'] = t('n/a');
    }
    if ($p_count <= 0) {
      $menu_items['parties']['count'] = t('n/a');
      $menu_items['parties']['disabled'] = TRUE;
    }
    if ($d_count <= 0) {
      $menu_items['decisions']['disabled'] = TRUE;
    }
    if ($nr_count <= 0) {
      $menu_items['national-reports']['disabled'] = TRUE;
    }
    if ($ap_count <= 0) {
      $menu_items['action-plans']['disabled'] = TRUE;
    }

    if ($course_url = $wrapper->field_online_course_link->value()) {
      $menu_items['course'] = array(
        'title' => t('<span class="glyphicon glyphicon-book" aria-hidden="true"></span> e-Learning course'),
        'url' => !empty($course_url['display_url']) ? $course_url['display_url'] : $course_url['url'],
      );
    }
    foreach ($menu_items as $path => $menu_item) {
      $text = isset($menu_item['count'])
        ? sprintf('%s <span class="badge pull-right">%s</span>', $menu_item['title'], $menu_item['count'])
        : $menu_item['title'];
      $link = l($text, $node_url . '/' . $path, array('html' => TRUE));
      if ($path == 'course') {
        $link = l($menu_item['title'], $menu_item['url'], array('html' => TRUE));
      }
      $list_item = array('data' => $link, 'role' => 'presentation');
      if (isset($node->context) && $node->context == $path) {
        $list_item['class'][] = 'active';
      }
      if (!empty($menu_item['disabled'])) {
        $list_item['class'][] = 'disabled';
      }
      $contextual_menu['#items'][$path] = $list_item;
    }
    if ($untc_url = $wrapper->field_un_treaty_database_link->value()) {
      $contextual_menu['#items']['un-treaty-collection-link'] = array(
        'data' => l(t('UN treaty collection link'), $untc_url['url'], $untc_url),
        'role' => 'presentation',
      );
    }
    if (!empty($hide)) {
      foreach ($hide as $k) {
        unset($contextual_menu['#items'][$k]);
      }
    }
  }
}

function treaty_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (isset($router_item['page_arguments'][0]->type) && $router_item['page_arguments'][0]->type == 'treaty') {
    $context_menu = array();
    $node = $router_item['page_arguments'][0];
    drupal_alter('treaty_contextual_menu', $context_menu, $node);
    if (!empty($context_menu)) {
      $data['tabs'][1] = array(
        'count' => count($context_menu),
        'output' => $context_menu,
      );
    }
  }
}

function _treaty_get_treaties() {
  $source_informea = current(taxonomy_get_term_by_name('InforMEA', 'data_source'));
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'treaty')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_data_source', 'tid', $source_informea->tid)
    ->fieldOrderBy('field_official_name', 'value')
    ->execute();

  $treaties = array();
  $protocols = array();
  if (!isset($result['node'])) {
    return array();
  }
  $nodes = entity_load('node', array_keys($result['node']));
  foreach ($nodes as $nid => $node) {
    $wrapper = entity_metadata_wrapper('node', $node);
    // Protocols
    $parent = $wrapper->field_parent_treaty->value();
    if ($parent) {
      $protocols[$parent->nid][] = $node;
      continue;
    }
    $treaties[$nid] = $node;
  }
  // Protocols
  foreach ($protocols as $parent_nid => $protocols) {
    if (array_key_exists($parent_nid, $treaties)) { // Kuala Lumpur 3rd level
      $parent              = $treaties[$nid];
      $parent->protocols = $protocols;
    }
  }
  return $treaties;
}

function treaty_preprocess_views_view(&$variables) {
  if ($variables['view']->name == 'treaty_listing_page') {
    // Adds the treaties JavaScript file to the page.
    drupal_add_js(drupal_get_path('module', 'treaty') . '/js/treaties.js');
  }
}

function treaty_views_pre_render(&$view) {
  if ($view->name == 'treaty_listing_page') {
    $regions = array();
    $treaties = [];
    if (!empty($view->result)) {
      foreach ($view->result as $result) {
        $treaties[] = $result->nid;
      }
    }
    if (!empty($treaties)) {
      $q = db_select('field_data_field_region', 'r')
        ->fields('r', ['field_region_tid'])
        ->condition('r.bundle', 'treaty')
        ->condition('r.entity_id', $treaties, 'IN');
      $regions_tids = array_unique($q->execute()->fetchCol());

      foreach ($regions_tids as $tid) {
        if ($t = taxonomy_term_load($tid)) {
          $regions[$tid] = $t;
        }
      }
    }

    uasort($regions, function($a, $b) {
      return strcasecmp($a->name, $b->name);
    });

    $view->regions = $regions;
  }
}


function treaty_get_odata_identifier($treaty) {
  if(is_object($treaty)) {
    $id = $treaty->nid;
  }
  else {
    $id = $treaty;
  }
  $w = entity_metadata_wrapper('node', $id);
  //@todo make a db_select or even cache this information - it never changes!
  return $w->field_odata_identifier->value();
}

/**
 * Absolute URL to a treaty article paragraph (in treaty text page).
 * @param $id_treaty
 * @param $id_article
 * @param $id_paragraph
 *
 * @return string
 */
function treaty_url_paragraph($id_treaty, $id_article, $id_paragraph) {
  $options = array(
    'absolute' => TRUE,
  );
  $link = url('node/' . $id_treaty, $options) . '/text?';
  $query = array('article' => $id_article, 'paragraph' => $id_paragraph);
  $fragment = 'paragraph-' . $id_paragraph;
  return $link . drupal_http_build_query($query) . '#' . $fragment;
}

/**
 * Absolute URL to a treaty article (in treaty text page).
 * @param $id_treaty
 * @param $id_article
 *
 * @return string
 */
function treaty_url_article($id_treaty, $id_article) {
  $options = array(
    'absolute' => TRUE,
  );
  $link = url('node/' . $id_treaty, $options) . '/text?';
  $query = array('article' => $id_article);
  $fragment = 'article-' . $id_article;
  return $link . drupal_http_build_query($query) . '#' . $fragment;
}

/**
 * Absolute URL to a treaty text page.
 * @param $id_treaty
 * @param $id_article
 * @param $id_paragraph
 *
 * @return string
 */
function treaty_url_text($id_treaty) {
  $options = array(
    'absolute' => TRUE,
  );
  $link = url('node/' . $id_treaty, $options) . '/text';
  $query = array();
  return $link . drupal_http_build_query($query);
}

/**
 * Absolute URL to a treaty decision (in treaty text page).
 * @param $id_treaty
 * @param $id_article
 *
 * @return string
 */
function treaty_url_decision($id_treaty, $id_decision) {
  $options = array(
    'absolute' => TRUE,
  );
  return url('node/' . $id_decision, $options);
}

function treaty_url_national_report($id_treaty, $id_report) {
  $options = array(
    'absolute' => TRUE,
  );
  $link = url('node/' . $id_treaty, $options) . '/national-reports';
  return $link;
}

function treaty_url_action_plan($id_treaty, $id_report) {
  $options = array(
    'absolute' => TRUE,
  );
  $link = url('node/' . $id_treaty, $options) . '/action-plans';
  return $link;
}


/**
 * Absolute URL to a treaty decision (in treaty text page).
 * @param $id_treaty
 * @param $id_article
 *
 * @return string
 */
function treaty_url_logo($treaty) {
  $w = entity_metadata_wrapper('node', $treaty->nid);
  $logo = $w->field_logo->value();
  return empty($logo) ? null : theme('image_style', array('style_name' => 'logo', 'path' => $logo['uri']));
}

/**
 * Check if the treaty decisions are covered by the API implementation
 * @param integer $id_treaty
 *
 * @return bool
 *   TRUE if has, FALSE if not implemented yet
 */
function treaty_can_have_decisions($id_treaty) {
  $cache_key = 'informea_treaty_' . __FUNCTION__;
  $cache = cache_get($cache_key);
  if(empty($cache->data)) {
    $q = db_select('node', 'a')->fields('a', array('nid'));
    $q->innerJoin('field_data_field_has_api_decisions', 'b', 'a.nid = b.entity_id AND a.vid = b.revision_id');
    $q->condition('field_has_api_decisions_value', 0, '!=');
    $data = $q->execute()->fetchCol();
    $ret = is_array($data) && in_array($id_treaty, $data);
    if (is_array($data)) {
      cache_set($cache_key, $data);
    }
  } else {
    $ret = is_array($cache->data) && in_array($id_treaty, $cache->data);
  }
  return $ret;
}

/**
 * Check if the treaty decisions are covered by the API implementation
 * @param integer $id_treaty
 *
 * @return bool
 *   TRUE if has, FALSE if not implemented yet
 */
function treaty_can_have_action_plans($id_treaty) {
  $cache_key = 'informea_treaty_' . __FUNCTION__;
  $cache = cache_get($cache_key);
  if(empty($cache->data)) {
    $q = db_select('node', 'a')->fields('a', array('nid'));
    $q->innerJoin('field_data_field_has_api_action_plans', 'b', 'a.nid = b.entity_id AND a.vid = b.revision_id');
    $q->condition('field_has_api_action_plans_value', 0, '!=');
    $data = $q->execute()->fetchCol();
    $ret = is_array($data) && in_array($id_treaty, $data);
    if (is_array($data)) {
      cache_set($cache_key, $data);
    }
  } else {
    $ret = is_array($cache->data) && in_array($id_treaty, $cache->data);
  }
  return $ret;
}

/**
 * Check if the treaty decisions are covered by the API implementation
 * @param integer $id_treaty
 *
 * @return bool
 *   TRUE if has, FALSE if not implemented yet
 */
function treaty_can_have_national_reports($id_treaty) {
  $cache_key = 'informea_treaty_' . __FUNCTION__;
  $cache = cache_get($cache_key);
  if(empty($cache->data)) {
    $q = db_select('node', 'a')->fields('a', array('nid'));
    $q->innerJoin('field_data_field_has_api_national_reports', 'b', 'a.nid = b.entity_id AND a.vid = b.revision_id');
    $q->condition('field_has_api_national_reports_value', 0, '!=');
    $data = $q->execute()->fetchCol();
    $ret = is_array($data) && in_array($id_treaty, $data);
    if (is_array($data)) {
      cache_set($cache_key, $data);
    }
  } else {
    $ret = is_array($cache->data) && in_array($id_treaty, $cache->data);
  }
  return $ret;
}


/**
 * Implements hook_form_alter().
 *
 * In the decision reorder screen show a drop-down instead of the text input.
 */
function treaty_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-decision-ordering-page-reorder') {
    $view = $form_state['view'];
    $id_treaty = $view->args[0];
    $q = db_select('node', 'a')->fields('a', array('nid', 'title'));
    $q->innerJoin('field_data_field_treaty', 'b', 'a.nid = b.entity_id AND a.vid = b.revision_id');
    $q->innerJoin('field_data_field_meeting', 'c', 'b.entity_id = c.field_meeting_target_id');
    $q->innerJoin('field_data_event_calendar_date', 'd', 'a.nid = d.entity_id');
    $q->condition('b.bundle', 'event_calendar');
    $q->groupBy('a.nid');
    $q->condition('field_treaty_target_id', $id_treaty);
    $q->orderBy('d.event_calendar_date_value', 'DESC');
    $meetings = $q->execute()->fetchAll();
    $options = array('' => t('-- Please select a meeting --'));
    foreach ($meetings as $meeting) {
      $options[$meeting->nid] = $meeting->title;
    }
    $form['field_meeting_target_id'] = array(
      '#type' => 'select',
      '#options' => $options,
    );
  }
}

/**
 * Implementes hook_form_FORM_ID_alter().
 *
 * Alter the contact form to make the treaty in field_contact_roles single valued.
 */
function treaty_form_contact_person_node_form_alter(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'treaty') . '/styles/edit-form}.css');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function treaty_form_treaty_article_node_form_alter(&$form) {
  if (!empty($_GET['edit']['field_treaty'][LANGUAGE_NONE]) && is_numeric($_GET['edit']['field_treaty'][LANGUAGE_NONE])) {
    $tid = intval($_GET['edit']['field_treaty'][LANGUAGE_NONE]);
    // Also compute the weight for this next paragraph (field_sorting_order)
    // SELECT max(b.field_sorting_order_value) FROM field_data_field_treaty a
    // INNER JOIN field_data_field_sorting_order b ON a.entity_id = b.entity_id
    // WHERE
    // a.bundle = 'treaty_article'
    // AND a.field_treaty_target_id = 80599
    // ORDER BY b.field_sorting_order_value
    $next = db_query("SELECT MAX(b.field_sorting_order_value) FROM {field_data_field_treaty} a
      INNER JOIN {field_data_field_sorting_order} b ON a.entity_id = b.entity_id
      WHERE a.bundle = 'treaty_article'
      AND a.field_treaty_target_id = :tid
      ORDER BY b.field_sorting_order_value", array(':tid' => $tid))->fetchField();
    // Increment
    $next = empty($next) ? 5 : $next + 5;
    $form['field_sorting_order'][LANGUAGE_NONE][0]['value']['#default_value'] = $next;

    $form['field_treaty'][LANGUAGE_NONE]['#default_value'] = $tid;
  }
  return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function treaty_form_treaty_paragraph_node_form_alter(&$form) {
  global $user;
  if (!empty($_GET['edit']['field_treaty'][LANGUAGE_NONE]) && is_numeric($_GET['edit']['field_treaty'][LANGUAGE_NONE])) {
    $form['field_treaty'][LANGUAGE_NONE]['#default_value'] = intval($_GET['edit']['field_treaty'][LANGUAGE_NONE]);
  }
  if (!empty($_GET['edit']['field_parent_treaty_article'][LANGUAGE_NONE]) && is_numeric($_GET['edit']['field_parent_treaty_article'][LANGUAGE_NONE])) {
    $pid = intval($_GET['edit']['field_parent_treaty_article'][LANGUAGE_NONE]);
    $w = entity_metadata_wrapper('node', $pid);

    // Also compute the weight for this next paragraph (field_sorting_order)
    // SELECT max(b.field_sorting_order_value) FROM field_data_field_parent_treaty_article a
    // INNER JOIN field_data_field_sorting_order b ON a.entity_id = b.entity_id
    // WHERE a.bundle = 'treaty_paragraph'
    // AND a.field_parent_treaty_article_target_id = 11787
    // ORDER BY b.field_sorting_order_value
    $next = db_query("SELECT MAX(b.field_sorting_order_value) FROM {field_data_field_parent_treaty_article} a
      INNER JOIN {field_data_field_sorting_order} b ON a.entity_id = b.entity_id
      WHERE a.bundle = 'treaty_paragraph'
      AND a.field_parent_treaty_article_target_id = :aid
      ORDER BY b.field_sorting_order_value", array(':aid' => $pid))->fetchField();
    // Increment
    $next = empty($next) ? 5 : $next + 5;
    $form['field_sorting_order'][LANGUAGE_NONE][0]['value']['#default_value'] = $next;

    $form['field_parent_treaty_article'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $w->label() . ' (' . $pid . ')';
  }

  $user_is_mea = informea_user_is_mea($user);
  if ($user_is_mea) {
    /** @see informea_entityreference_treaty_article_autocomplete_callback */
    $autocomplete_path = 'informea/autocomplete/single/field_parent_treaty_article/node/treaty_paragraph/';
    $autocomplete_path .= !empty($form['#node']->nid) ? $form['#node']->nid : 'NULL';
    $form['field_parent_treaty_article'][LANGUAGE_NONE][0]['target_id']['#autocomplete_path'] = $autocomplete_path;
    $form['#validate'][] = 'treaty_form_trearty_paragraph_node_form_validate';
  }
  return;
}

function treaty_form_trearty_paragraph_node_form_validate($form, $form_state) {
  // We validate that the selected article belongs to the selected treaty.
  if (!empty($form_state['values']['field_parent_treaty_article'][LANGUAGE_NONE][0]['target_id'])) {
    $id_treaty = $form_state['values']['field_treaty'][LANGUAGE_NONE][0]['target_id'];
    if (!empty($form_state['values']['field_treaty'][LANGUAGE_NONE][0]['target_id'])) {
      $id_article = $form_state['values']['field_parent_treaty_article'][LANGUAGE_NONE][0]['target_id'];
      $id_treaty_article = NULL;
      try {
        $w = entity_metadata_wrapper('node', $id_article);
        $id_treaty_article = $w->field_treaty->value()[0]->nid;
      } catch(Exception $e) {
      }
      if ($id_treaty_article != $id_treaty) {
        form_set_error('field_parent_treaty_article', t('The selected article does not belong to the treaty above'));
      }
    }
  }
}


/**
 * Check if the current user can reorder decisions for a treaty
 *
 * @param stdClass $account
 * @return bool
 */
function treaty_check_permission_reorder_decisions($account = NULL) {
  if (arg(0) == 'node' && $node = node_load(arg(1))) {
    if ($node->type == 'treaty') {
      // Suposely only "administrators" should have this permission ...
      if (user_access('administer site configuration')) {
        return TRUE;
      }
      // $account seem to be alway empty ...
      global $user;
      $w = entity_metadata_wrapper('user', $user);
      try {
        foreach ($w->field_user_treaties->value() as $treaty) {
          if ($treaty->nid == $node->nid) {
            return TRUE;
          }
        }
      } catch(Exception $e) {
        watchdog_exception('treaty', $e);
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_node_access().
 */
function treaty_node_access($node, $op, $account) {
  if ($op == 'update' || $op == 'delete') {
    if (in_array($node->type, informea_mea_content_types())) {
      // Allow editing of nodes that the MEA user has assigned in treaty
      if (informea_user_mea_can_edit_node($node, $account)) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
* Implements hook_block_info().
*
* This hook declares what blocks are provided by the module.
*/
function treaty_block_info() {
  $blocks['treaty_global'] = array(
    'info' => t('Global treaties and conventions'),
    'status' => TRUE,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'treaties'
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function treaty_block_view($delta = '') {
  switch ($delta) {
    case 'treaty_global':
      $block['subject'] = t('Global treaties');
      $block['content'] = treaty_block_contents($delta);

      break;
  }

  return $block;
}

/**
 * A module-defined block content function.
 */
function treaty_block_contents($delta) {
  switch ($delta) {
    case 'treaty_global':
      $query = new EntityFieldQuery();

      $query
        ->entityCondition('entity_type', 'entityqueue_subqueue')
        ->entityCondition('bundle', 'treaty_global');

      $result = $query->execute();
      $variables = array(
        'treaties' => array()
      );

      if (!empty($result['entityqueue_subqueue'])) {
        $subqueues = entity_load('entityqueue_subqueue', array_keys($result['entityqueue_subqueue']));
        foreach ($subqueues as $subqueue) {
          $wrapper = entity_metadata_wrapper('entityqueue_subqueue', $subqueue);
          $key = $wrapper->getIdentifier();
          $nodes = $wrapper->eq_node->value();

          foreach ($nodes as $node) {
            $variables['treaties'][$key][$node->nid] = entity_metadata_wrapper('node', $node);
          }
        }
      }

      $result = theme('treaty_global', $variables);

      break;
  }

  return $result;
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function treaty_contextual_links_view_alter(&$element, $items) {
  if (!empty($element['#element']['#block']) && $element['#element']['#block']->delta == 'treaty_global') {
    if (user_access('create treaty_global entityqueue')) {
      $element['#links']['treaty-global'] = array(
        'title' => t('Edit global treaties'),
        'href' => 'admin/structure/entityqueue/list/treaty_global/subqueues'
      );
    }
  }
}


/**
 * Implements hook_node_update().
 */
function treaty_node_update($node) {
  if ($node->type == 'treaty') {
    $count = 0;
    if ($node->original->status == NODE_PUBLISHED &&
        $node->status == NODE_NOT_PUBLISHED) {
      //Published -> unpublished
      $new_status = NODE_NOT_PUBLISHED;
    }
    elseif ($node->original->status == NODE_NOT_PUBLISHED &&
          $node->status == NODE_PUBLISHED) {
      //Unpublished -> published
      $new_status = NODE_PUBLISHED;
    }
    else {
      //none of the above happened so we don't run the batch opperation
      return;
    }
    $query = db_select('field_data_field_treaty', 'a')
      ->fields('a', array('entity_id'))
      ->condition('a.field_treaty_target_id', $node->nid)
      ->condition('a.entity_type', 'node');
    $data = $query->execute()->fetchCol();
    $count = count($data);
    $batch = array(
      'operations' => array(
        array('treaty_update_batch_process', array($node->nid, $count, $new_status)),
      ),
      'finished' => 'treaty_update_batch_finished',
      'title' =>  $new_status == NODE_PUBLISHED
        ? t('Publishing !title treaty and all the related content', array('!title' => $node->title))
        : t('Unpublishing !title treaty and all the content related content', array('!title' => $node->title)),
      'error_message' => t('The process has encountered an error. Please report this error to the technical people'),
      'progress_message' => t('Working, please wait ...'),
    );
    batch_set($batch);
  }
}

function treaty_update_batch_process($nid, $total_number, $status, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = $total_number;
  }

  $limit = 10;

  $query = db_select('field_data_field_treaty', 'a')
    ->fields('a', array('entity_id'))
    ->condition('a.field_treaty_target_id', $nid)
    ->range($context['sandbox']['progress'], $limit);
  $data = $query->execute()->fetchCol();
  $child_nodes = node_load_multiple($data);

  foreach($child_nodes as $child) {
    $child->status = $status;
    node_save($child);
    $context['results'][] = $child->title;
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $child->nid;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function treaty_update_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = t('@count items successfully updated.', array('@count' => count($results)));
    drupal_set_message($message);
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}

function treaty_ga_send_pageview($treaty, $keys, $context) {
  $wrapper = entity_metadata_wrapper('node', $treaty);
  $js_identifier = 'treaty_' . $wrapper->getIdentifier();
  $url = NULL;
  switch ($context) {
    case '':
    case 'parties':
    case 'national-reports':
    case 'action-plans':
      $url = $wrapper->field_treaty_website_url->value()['url'];
      break;

    case 'text':
      $url = $wrapper->field_treaty_text_url->value()['url'];
      break;

    case 'decisions':
      $url = $wrapper->field_treaty_website_url->value()['url'];
      if (!$url) {
        return;
      }
      foreach ($keys as $key) {
        $script =
          <<<EOT
          (function ($) {
          $('#dialog-modal-ajax').on('shown.bs.modal', function() {
            analytics_integration_google_analytics_send_hit('$key', '$url', '$js_identifier', $('#modal-decision h4.modal-title').text());
          });
        })(jQuery)
EOT;
        drupal_add_js($script, array(
          'scope' => 'footer',
          'type' => 'inline',
          'weight' => 130
        ));
      }
      break;
  }
  if (!$url) {
    return;
  }
  foreach ($keys as $key) {
    analytics_integration_google_analytics_send_hit($key, $url, $js_identifier, $wrapper->label());
  }
}

function treaty_piwik_send_pageview($treaty, $keys, $context) {
  $wrapper = entity_metadata_wrapper('node', $treaty);
  $page_title = NULL;
  switch ($context) {
    case 'parties':
    case 'national-reports':
    case 'action-plans':
    case 'text':
      $page_title = $wrapper->label();
      break;

    case 'decisions':
      $page_title = $wrapper->label();
      foreach ($keys as $key => $id) {
        $script =
          <<<EOT
          (function ($) {
          $('#dialog-modal-ajax').on('shown.bs.modal', function() {
            analytics_integration_piwik_send_hit('$key', '$id', $('#modal-decision h4.modal-title').text());
          });
        })(jQuery)
EOT;
        drupal_add_js($script, array(
          'scope' => 'footer',
          'type' => 'inline',
          'weight' => 130
        ));
      }
      break;
  }
  if (!$page_title) {
    return;
  }
  foreach ($keys as $key => $id) {
    analytics_integration_piwik_send_hit($key, $id, $page_title);
  }
}

function treaty_export_text_add_tags(AkomaNtosoElement &$akomaNtosoElement, $node) {
  $tags = array();
  if (!empty($node->field_informea_tags)) {
    foreach ($node->field_informea_tags[LANGUAGE_NONE] as $tag) {
      $tags[] = $tag['tid'];
    }
  }
  if (!empty($tags) && is_array($tags)) {
    foreach ($tags as $tag) {
      $term = taxonomy_term_load($tag);
      if (!empty($term)) {
        $tw = entity_metadata_wrapper('taxonomy_term', $term);
        $keywordElement = new AkomaNtosoElement('keyword', $tw->label());
        $keywordElement->addAttribute('dictionary', 'informea');
        $akomaNtosoElement->addChild($keywordElement);
      }
    }
  }
}

function treaty_export_text_to_xml($treaty) {
  drupal_add_http_header('Content-Type', 'application/xml');
  $wrapper = entity_metadata_wrapper('node', $treaty);
  $akomaNtoso = new AkomaNtoso();
  $document = new AkomaNtosoDocument();

  /* META */
  $meta = new AkomaNtosoElement('meta');
  $publication = new AkomaNtosoElement('publication');
  $publication->addAttribute('date', gmdate("Y/m/d", $wrapper->field_entry_into_force->value()));
  $publication->addAttribute('name', $wrapper->field_official_name->value());
  $publication->addAttribute('showAs', $wrapper->label());
  $meta->addChild($publication);
  $document->addChild($meta);
  /* END META */

  /* BODY */
  $body = new AkomaNtosoElement('body');
  $articles = treaty_get_treaty_text($treaty->nid);
  foreach ($articles as $article) {
    $aw = entity_metadata_wrapper('node', $article);
    if (strtolower(trim($article->official_title)) == 'preamble') {
      $articleElement = new AkomaNtosoElement('preamble');
    }
    else {
      $articleElement = new AkomaNtosoElement('article');
      $articleElement->addChild(new AkomaNtosoElement('heading', $article->official_title));
    }

    treaty_export_text_add_tags($articleElement, $article);
    if (!empty($article->paragraphs)) {
      foreach ($article->paragraphs as $paragraph) {
        $pw = entity_metadata_wrapper('node', $paragraph);
        $paragraphElement = new AkomaNtosoElement('paragraph');
        treaty_export_text_add_tags($paragraphElement, $paragraph);
        $text = field_view_field('node', $paragraph, 'body', 'full')[0]['#markup'];
        //@todo: add CData or strip tags?
        $text = strip_tags($text);
        if ($official_order = $pw->field_official_order->value()) {
          $paragraphElement->addChild(new AkomaNtosoElement('num', $official_order));
        }
        $paragraphElement->addChild(new AkomaNtosoElement('content', $text));
        $articleElement->addChild($paragraphElement);
      }
    }
    else {
      if ($articleText = $aw->body->value()) {
        $articleText = check_markup($articleText['safe_value'], 'full_html');
        $articleElement->addChild(new AkomaNtosoElement('content', $articleText, TRUE));
      }
    }
    switch ($articleElement->getType()) {
      case 'preamble':
        $document->addChild($articleElement);
        break;
      default:
        $body->addChild($articleElement);
    }
  }
  $document->addChild($body);
  /* END BODY */

  $akomaNtoso->addChild($document);
  print $akomaNtoso->render()->asXML();
  drupal_exit();
}

function treaty_select_meeting_render_panel() {
  if ($node = menu_get_object()) {
    module_load_include('module', 'decision', 'decision.api');
    $count = decision_get_meeting_decisions_count($node->nid);
    return $count > 0;
  }
  return false;
}

function treaty_text_get_last_modification_date($nid) {
  $query = db_select('node', 'n');
  $query->innerJoin('field_data_field_treaty', 't', 't.entity_id = n.nid');
  $query->addExpression('MAX(`changed`)');
  $query->condition('t.field_treaty_target_id', $nid);
  $query->condition('n.type', array('treaty_article', 'treaty_paragraph'), 'IN');
  return $query->execute()->fetchField();
}

/*
 * static function to get base url
 * return node/nid or treaties/odata_identifier if no alias
 * */
function treaty_get_url_base($nid, $odata_identifier) {
  static $path;
  if (!$path) {
    $treaty_url = url(drupal_get_path_alias('node/' . $nid));
    if (strpos($treaty_url, 'node/' . $nid)) {
      $path = 'node/' . $nid;
    } else {
      $path = 'treaties/' . $odata_identifier;
    }
    krumo($path);
  }
  return $path;
}
