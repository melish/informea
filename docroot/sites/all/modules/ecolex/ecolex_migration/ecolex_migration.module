<?php

/**
 * Implements hook_migrate_api().
 *
 * Set the API level to 2, for migration classes to be recognized by Migrate.
 */
function ecolex_migration_migrate_api() {
  module_load_include('inc', 'elis_consumer', 'includes/migrations/TreatyElisMigration');
  module_load_include('inc', 'elis_consumer', 'includes/migrations/CourtDecisionElisMigration');

  $ret = array(
    'api' => 2,
    'groups' => array(
      'ecolex' => array(
        'title' => 'ECOLEX content migration'
      ),
      'elis' => array(
        'title' => t('ELIS direct data migration'),
      ),
    ),
    'migrations' => array(),
  );
  // source_url_pattern also dublicated in EcolexLegislationMigrateSource because of cache
  $ret['migrations']['ecolex_legislation'] = array(
    'class_name' => 'EcolexLegislationMigration',
    'group_name' => 'ecolex',
    'source_url_pattern' => 'http://www.ecolex.org/export/?type=legislation&format=json',
  );
  $ret['migrations']['ecolex_literature'] = array(
    'class_name' => 'EcolexLiteratureMigration',
    'group_name' => 'ecolex',
    'source_url_pattern' => 'http://www.ecolex.org/export/?type=literature&format=json',
  );
  $ret['migrations']['ecolex_treaty'] = array(
    'class_name' => 'EcolexTreatyMigration',
    'group_name' => 'ecolex',
    'source_url_pattern' => 'http://www.ecolex.org/export/?type=treaty&format=json',
  );
  return $ret;
}

/**
 * Implements hook_cronapi().
 *
 * Provided by the elysia_cron module.
 */
function ecolex_migration_cronapi($ob, $job = NULL) {
  return array(
    'ecolex_migration_literature_sync' => array(
      'description' => 'Update Ecolex literatures',
      'rule' => '0 1 * * *', // Every day at 01:00
    ),
    'ecolex_migration_legislation_sync' => array(
      'description' => 'Update Ecolex legislations',
      'rule' => '0 1 * * *', // Every day at 01:00
    ),
    'ecolex_migration_treaty_sync' => array(
      'description' => 'Update Ecolex treaties',
      'rule' => '0 1 * * *', // Every day at 01:00
    ),
  );
}

function ecolex_migration_process_import($migration_name) {
  /* @var $migration EcolexLegislationMigration */
  $migration = Migration::getInstance($migration_name);

  if ($migration->getStatus() != MigrationBase::STATUS_IDLE) {
    watchdog('ecolex_migration', '@migration migration is currently not idle, skipping (status: @status)',
      array(
        '@migration' => $migration_name,
        '@status' => $migration->getStatus()
      ),
      WATCHDOG_ERROR
    );
  }
  else {
    watchdog('ecolex_migration', '@migration migration: starting import',
      array('@migration' => $migration_name), WATCHDOG_INFO);

    $result = $migration->processImport();

    watchdog('ecolex_migration', '@migration migration: finished with result: @result',
      array('@migration' => $migration_name, '@result' => $result), WATCHDOG_INFO);
  }
}

function ecolex_migration_literature_sync() {
  ecolex_migration_process_import('ecolex_literature');
}

function ecolex_migration_legislation_sync() {
  ecolex_migration_process_import('ecolex_legislation');
}

function ecolex_migration_treaty_sync() {
  ecolex_migration_process_import('ecolex_treaty');
}


function ecolex_migration_http_request($url, $headers = array()) {
  migrate_instrument_start(__CLASS__ . ' http_request');
  ecolex_migration_log(__METHOD__ . ": $url", MigrationBase::MESSAGE_INFORMATIONAL);
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 3);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_NOBODY, 0);
  $ret = curl_exec($ch);
  $info = curl_getinfo($ch);
  if ($info['http_code'] != 200) {
    $code = $info['http_code'];
    ecolex_migration_log(__METHOD__ . ": Failure ({$code}) for URL: $url", MigrationBase::MESSAGE_ERROR);
    $ret = NULL;
  }
  curl_close($ch);
  migrate_instrument_stop(__CLASS__ . ' http_request');
  return $ret;
}


/**
 * Log system for the ws_consumer_odata migrations.
 *
 * @param string $message
 *   Log message
 * @param int $severity
 *    See MigrationBase::MESSAGE_* constants
 */
function ecolex_migration_log($message, $severity = MigrationBase::MESSAGE_INFORMATIONAL) {
  if (function_exists('drush_log')) {
    $status = 'status';
    switch($severity) {
      case MigrationBase::MESSAGE_ERROR:
        $status = 'error';
        break;
      case MigrationBase::MESSAGE_WARNING:
        $status = 'warning';
        break;
      case MigrationBase::MESSAGE_NOTICE:
        $status = 'notice';
        break;
    }
    drush_log($message, $status);
  }
}



function ecolex_migration_translate_entity($entity_type, $entity, $translations = array()) {
  if (empty($translations)) {
    return;
  }
  $languages = array_keys(language_list());
  $translation_handler = entity_translation_get_handler($entity_type, $entity);
  $translation_handler->setOriginalLanguage('en');
  $translation_handler->initTranslations();
  $entity->translations = $translation_handler->getTranslations();
  foreach ($languages as $language) {
    if ($language == 'en') {
      continue;
    }
    if (in_array($language, $translations)) {
      $translation_handler->setTranslation(array(
        'translate' => 0, 'status' => 1, 'uid' => 1,
        'language' => $language,
        'source' => 'en',
      ));
    }
  }
  entity_save($entity_type, $entity);
}

function ecolex_migration_create_taxonomy_term($name, $vocabulary_machine_name, $translations = array()) {
  $voc = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name);
  $term = new stdClass();
  $term->name = $name;
  $term->vid = $voc->vid;
  $term->language = 'en';
  if (!empty($translations)) {
    $term->name_field = array();
    foreach ($translations as $lang => $value) {
      $term->name_field[$lang][0]['value'] = $value;
    }
  }
  taxonomy_term_save($term);
  ecolex_migration_translate_entity('taxonomy_term', $term, array_keys($translations));
  return $term->tid;
}
